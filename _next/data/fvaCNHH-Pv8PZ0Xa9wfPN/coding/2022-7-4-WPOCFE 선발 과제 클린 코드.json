{"pageProps":{"frontMatter":{"title":"원티드 프리온보드 코스, 선발 과제 클린 코드하기","description":"선발 과제를 클린 코드 규칙에 따라 리펙토링 한다","tags":["원티드 프리온보드 프론트엔드 코스"],"publishedDate":"2022/07/04","lastModifiedAt":"2022/07/05"},"markdownBody":"\n# 1. 학습목표\n\n1. `Clean Code`를 작성하는 것이 중요한 이유에 대해 설명할 수 있다.\n2. 변수와 관련된 규칙 2가지를 설명할 수 있다.\n3. `조건문`이 아닌 기본 `매개변수`를 활용하여 함수를 깔끔하게 처리할 수 있다.\n4. 함수와 관련된 규칙 3가지를 설명할 수 있다.\n\n## 1.A. 대답\n\n참조 : [clean-code-javascript-ko](https://github.com/qkraudghgh/clean-code-javascript-ko)\n\n### 1.A.1. Clean Code를 작성의 이유\n\n코드의 가독성을 높여서 남이나 기억을 잃어버린 미래의 본인도 의미파악을 쉽게 하려고.\n\n### 1.A.2. 변수와 관련된 규칙\n\n- 의미있고 발음이 쉬운 이름\n- 동일한 유형에는 동일한 어휘를 사용\n- 검색 가능한 이름을 사용\n- 의도를 나타내는 이름 사용\n- 누구나 알아 볼 수 있는 이름\n- 문맥상 필요없는 것 쓰지 않기\n- 연산자, 조건문보다 기본 매개변수 할당\n\n### 1.A.3. `조건문`이 아닌 `기본 매개변수`를 활용하여 함수를 깔끔하게 처리\n\n```js\n// 조건문 사용\nfunction createAccount(name) {\n  return name || \"아무개\";\n}\n// 기본 매개변수 사용\nfunction createAccount(name = \"아무개\") {\n  return name;\n}\n\ncreateAccount(); // name이 undefined일 때 아무개 반환\n```\n\n### 1.A.4. 함수와 관련된 규칙\n\n- 인자는 2개 이하가 이상적\n- 하나의 행동만 한다\n- 함수명은 함수가 뭘 하는지 알 수 있어야 한다\n- 함수는 단일 행동을 추상화 해야 한다\n- 중복된 코드 작성 하지 않기\n- 매개변수로 플래그를 사용치 않기\n- 부수 효과 피하기\n- 전역 함수 사용치 않기\n- 조건문 캡슐화 하기\n- 부정조건문 사용치 않기\n- 조건문 작성 피하기\n- 죽은 코드 지우기\n- 함수 호출자와 피호출자는 가깝게 두기\n- 주석을 남기지 않기\n\n# 2. Q.\n\n- Car 객체 안에 carColor는 문맥상 반드시 필요할까요?\n\n```js\n// Car 객체\nBad:\nconst Car = {\n  carMake: 'BMW',\n  carModel: 'M3',\n  carColor: '파란색'\n};\n\nfunction paintCar(car) {\n  car.carColor = '빨간색';\n}\n\nGood:\nconst Car = {\n  make: 'BMW',\n  model: 'M3',\n  color: '파란색'\n};\n\nfunction paintCar(car) {\n  car.color = '빨간색';\n}\n```\n\n- 매개변수란?\n- `||` 연산자는 무엇이고 언제 사용할까요?\n- 캡슐화란 무엇인가? (그룹 과제)\n\n## 2.A. 대답\n\n### 2.A.1. Car 객체 안에 carColor는 문맥상 반드시 필요할까요?\n\n객체가 잘 분리돼 있어 의미 파악이 쉬워 안 필요 합니다.\n\n### 2.A.2. 매개변수란?\n\n```js\n// plus(a, b)의 a, b가 매개변수(parameter). 함수에 정의 돼 있는 것\nfunction plus(a, b) {\n  return a + b;\n}\n\n// plus(1, 2)의 1, 2가 인수(argument). 함수에 전달된 값\nplus(1, 2);\n```\n\n### 2.A.3. `||` 연산자는 무엇이고 언제 사용할까요?\n\n#### 2.A.3.a. 언제 사용하는지\n\n```js\n// 조건문에서 값이 하나라도 true면 통과하고 싶을 때\nif (0 || false || \"\" || true) {\n  console.log(true);\n} // true\n\n// 함수 반환할 때 조건문 대신 사용\n// 하지만 클린 코드에서는 기본 매개변수를 사용하길 권장함\nfunction getValue(value) {\n  return value || \"value가 false입니다\";\n}\nconsole.log(getValue(1)); // 1\nconsole.log(getValue()); // \"value가 false입니다\"\n```\n\n#### 2.A.3.b. 무엇인지\n\n참조 : [MDN `||`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR)\n\n이름 : 논리 OR 연산자(Logical OR operator, logical disjunction)\n\n설명 : 피연산자가 false로 변환된다면 다음 값을 반환하고 true로 변환된다면 해당값을 반환한다\n\n```js\nconsole.log(\"\" || false || true || \"hello\" || 123); // true\nconsole.log(\"\" || false || \"hello\" || true | 123); // \"hello\"\n```\n\n**연산자 우선순위** 모르면 헤맬 수 있음\n\n`&&` 연산자는 `||`연산자보다 먼저 실행된다\n\n```js\nconsole.log(true || (false && false)); // true\nconsole.log((true || false) && false); // false\n```\n\n#### 2.A.3.c. 비슷한 연산자\n\n참조 : [MDN `&&`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND), [MDN `??`](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator)\n\n**`??`**\n\n이름 : 널 병합 연산자(Nullish coalescing operator)\n\n설명 : 왼쪽 피연산자가 `null`이나 `undefined`일 때 오른쪽 피연산자를 반환하고 아니면 왼쪽 피연산자를 반환한다\n\n### 2.A.4. 캡슐화란 무엇인가? (그룹 과제)\n\n요약\n\n- 데이터나 함수를 캡슐에 넣어두는 것.\n- 캡슐 안으로 넣었기 때문에 외부 영향을 덜 받는다.\n- 매끈한 캡슐에 넣었기 때문에 다른 곳에서 재사용하기 쉽다.\n- 테스트가 쉽다?\n\n객체 캡슐화(encapsulation)는 프로퍼티와 메서드를 하나로 묶은 것이다. 특정 프로퍼티나 메서드를 감춰 정보은닉(infomation hiding)이나 외부에서 받는 영향을 방지하기 위한 목적이다.\n\n대부분 객체지향 프로그래밍 언어는 클래스를 정의하고 구성하는 프로퍼티나 메서드에 public, private, protected 같은 접근 제한자를 선언해 공개 범위를 한정할 수 있는데 자바스크립트는 현재까지 그렇지 않고 모두 public이다.\n"},"__N_SSG":true}