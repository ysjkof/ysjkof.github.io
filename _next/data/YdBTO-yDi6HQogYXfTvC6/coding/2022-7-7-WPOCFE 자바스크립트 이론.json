{"pageProps":{"frontMatter":{"title":"원티드 프리온보드 코스, 이론 자습","description":"식별자가 선언되는 과정. 호이스팅. 표현식과 문의 차이. 값의 전달과 참조의 전달의 차이.","tags":["원티드 프리온보드 프론트엔드 코스","자바스크립트 이론"],"publishedDate":"2022/07/07","lastModifiedAt":"2022/07/12"},"markdownBody":"\n**차례**\n\n# 1. 학습목표\n\n1. `식별자`가 선언되는 과정을 설명할 수 있다.\n2. `호이스팅`에 대해 상세히 설명할 수 있다.\n3. `표현식`과 `문`의 차이에 대해 설명할 수 있다.\n4. `값의 전달`과 `참조의 전달`의 차이를 설명할 수 있다.\n\n## 1.A. 학습\n\n### 1.A.1. 변수\n\n값이 위치하고 있는 메모리 주소에 접근하기 위해 사람이 이해할 수 있는 언어로 명명한 식별자(identifier)다.\n\n- 값의 위치(주소)를 기억하는 저장소.\n- 값의 위치란 메모리 상의 주소(adress)를 의미한다.\n\n```js\n// 1+2는 아무 곳에도 저장되지 않고, 재사용도 불가능.\n1 + 2;\n\n// 변수 : 한 개의 값을 저장하기 위한 수단\n// 변수명 : 메모리 공간에 저장된 값(변수)을 식별할 수 있는 고유한 이름\nconst id = 1;\nconst name = \"king\";\n\n// 객체나 배열 같은 자료구조는 여러개의 값을 그룹화 해 사용할 수 있다.\nconst list = [\n  { id: 1, name: \"king\" },\n  { id: 2, name: \"왕\" },\n];\n\n// result는 변수명이다.\n// result에 저장된 값(3)을 변수 값이라 한다.\n// 변수에 값을 저장하는 것들 할당, 읽어들이는 걸 참조라 한다\nconst result = 1 + 2;\n\n// var, let은 변수 재할당 가능\n// 하지만 새로운 메모리 공간에 할당한다\nlet 색깔 = \"red\";\n색깔 = \"black\";\n\n// const(constant, 상수)는 변수 재할당 불가능\nconst 상수 = \"sky\";\n상수 = \"blue\"; // TypeError: invalid assignment to const '상수'\n\n// 상수가 객체인 경우 내부 값은 변경 가능\nconst 객체 = {\n  id: 1,\n  name: \"king\",\n};\nconsole.log(객체.id); // 1\n객체.id = 2;\nconsole.log(객체.id); // 2\n\n// 배열도 가능\nconst 배열 = [1, 2, 3];\nconsole.log(배열); // [1, 2, 3]\n배열[0] = 5;\nconsole.log(배열); // [5, 2, 3]\n```\n\n### 1.A.2. 식별자(Identifier)\n\n- 어떤 값을 구별해서 식별할 수 있는 고유한 이름.\n- 식별자 result는 값(3)이 저장돼 있는 메모리 주소를 기억한다.\n- 식별자는 메모리 주소와 매핑 관계다.\n- 매핑 정보는 메모리에 저장되어야 한다.\n- 식별자는 값이 아니라 메모리 주소를 기억한다.\n- 변수, 함수, 클래스 등의 **이름은 모두 식별자**다.\n\n### 1.A.3. 호이스팅\n\n자바스크립트는 코드가 순차적으로 실행되는 런타임시점과 그 이전 시점이 있다.\n\n런타임 전 단계에서 모든 선언문이 해당 `scpoe`의 선두로 옮겨진 것처럼 동작하는 호이스팅이 발생하고 식별자를 생성한다.\n\n변수, 함수 호이스팅은 차이점이 있다. `var, let`으로 할당된 변수는 `undefined`로 초기화되고 이후 변수 할당문에 도달하면 값이 할당된다. 하지만 `const`는 초기화 되지 않는데 `const`로 할당된 변수를 할당문 전에 사용하려고 하면 ReferenceError가 발생한다.\n\n`함수 선언문`으로 생성된 식별자는 `함수 객체`로 초기화되기 때문에 런타임에서 선언문 이전에 변수를 참조하면 `undefined`로 평가되지만 함수 선언문으로 정의한 함수는 선언문 이전에 호출해도 원래 작동을 한다.\n\n초기화를 하는 이유는 가비지 콜렉팅 되지 않은 쓰레기 값이 있을 수 있기 때문에 미리 메모리 공간을 확보하는데 있다.\n\n```js\nconsole.log(함수선언문(1, 2)); // 3\nconsole.log(함수표현식(1, 2)); // TypeError: 함수표현식 is not a function\nconsole.log(변수선언문); // undefined\n\nconst 변수선언문 = 1; // 변수 선언문\nfunction 함수선언문(x, y) {\n  return x + y;\n}\nconst 함수표현식 = function (x, y) {\n  return x + y;\n};\n\nconsole.log(변수선언문); // 1\n```\n\n### 1.A.4. 가비지 콜렉터\n\n- 자바스크립트는 매니지드 언어로 가비지 콜렉터가 있다(vs 언매니지드 언어))\n- 가비지 콜렉터는 앱이 할당된 메모리를 주기적으로 검사 해 사용하지 않는 메모리를 해제한다.\n- 메모리에서 언제 해제될지는 예측할 수 없다.\n- 사용하지 않는 메모리란 어떤 식별자도 참조하지 않는 메모리 공간을 의미한다.\n\n### 1.A.5. 식별자 이름짓기 규칙\n\n- 특수문자를 제외한 문자, 숫자, 언더스코어(\\_), 달러 기호($)를 포함할 수 있다.\n- 단, 특수문자를 제외한 문자, 언더스코어(\\_), 달러 기호($)로 시작해야 한다.\n- 숫자로 시작하는 것은 허용하지 않는다.\n- 예약어는 식별자로 사용할 수 없다(ex. new, const, await, if ...)\n\n### 1.A.6. 이름짓기 규칙\n\n- **카멜 케이스** : `camelCase`\n- **스네이크 케이스** : `snake_case`\n- **파스칼 케이스** : `PascalCase`\n- **헝가리언 케이스** :\n  - `strFirstName`; type + identifier\n  - `$elem` = document.getElementById(\"id\"); DOM Node\n  - `observable$` = fromEvent(document, \"click\"); RxJS 옵저버블\n\n### 1.A.7. 표현식과 문\n\n-**값** : 식이 평가되어 생성된 결과\n\n```js\n10 + 20; // 30\n```\n\n- **리터럴** : 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법\n\n```js\n3; // 숫자 리터럴\n(\"hello\"); // 문자 리터럴\nfunction get() {} // 함수 리터럴\n```\n\n- **표현식** : **값으로 평가 될 수 있는 문**이다. 평가되면 새로운 값을 생성하거나 기존 값을 참조한다. **변수 선언 후 우항에 할당되면 표현식**\n\n```js\nlet score = 100; // 숫자 100은 그 자체로 리터럴\nlet score = 50 + 50; // 50 + 50은 평가되어 숫자 값 100을 생성하므로 표현식\nscore; // 변수참조 : 값으로 평가되므로 표현식이다\n\n// 값으로 평가 될 수 있는 문은 모두 표현식\n// 리터럴 표현식\n10;\n(\"hello\");\n\n// 식별자 표현식\nsum;\nperson.name;\narr[1];\n\n// 연산자 표현식\n10 + 20;\nsum = 10;\nsum !== 10;\n\n// 함수/메서드 호출 표현식(선언 했다고 가정)\nsquare();\nperson.getName();\n```\n\n- **문** : 선언문, 할당문, 조건문, 반복문 등으로 구분할 수 있다.\n\n```js\n// 변수 선언문\nvar x;\n\n// 할당문\nx = 5;\n\n// 함수 선언문\nfunction foo() {}\n\n// 조건문\nif (x > 1) {\n  console.log(x);\n}\n\n// 반복문\nfor (var i = 0; i < 2; i++) {\n  console.log(i);\n}\n```\n\n- 표현식인 문과 표현식이 아닌 문\n\n```js\n// 변수 선언문은 값으로 평가될 수 없으므로 표현식이 아님\nlet x;\n\n// 표현식\n1;\n2;\n1 + 2;\nx = 1 + 2;\n\n// 간단 명료한 구별법, 변수에 할당해보기\n// 표현식이 아닌 문은 값처럼 사용할 수 없다.\nlet foo = let x; // SyntaxError: Unexpected token var\n\n// 할당문은 표현식인 문이기 때문에 값처럼 사용할 수 있다.\nlet foo = x = 100;\nconsole.log(foo) // 100\n```\n\n### 1.A.8. 원시값과 객체의 비교\n\n**원시(Primitive) 타입** :\n\n- 변경 불가능한 값(immutable value)이다. 값을 직접 전달한다(값에 의한 전달, pass-by-value).\n- 값을 변경할 때 새 메모리 주소에 값을 할당하기 때문에 변경 불가능이라 한다\n- 유사 배열인 문자열을 아래처럼 수정해도 에러는 없지만 변경되지 않는다. 문자열이 readonly로 변경 불가능한 값이기 때문이다. 하지만 재할당은 가능.\n\n```js\n\"abc\"[0] = \"d\";\n```\n\n**참조(Reference) 타입** :\n\n- 객체 타입 === 참조 타입\n- 7개 원시 타입 외(함수, 배열, 정규표현식 등) 전부 객체다\n- 변경 가능한 값이다. 값을 참조에 의한 전달(pass-by-reference) 방식으로 전달한다.\n- 메모리 주소 변경 없이 값의 변경이 가능하다\n\n# 참고자료\n\n- 강의 자료\n- 모던 자바스크립트 Deep Dive\n"},"__N_SSG":true}