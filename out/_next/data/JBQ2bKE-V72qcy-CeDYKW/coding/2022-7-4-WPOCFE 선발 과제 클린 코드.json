{"pageProps":{"frontMatter":{"title":"WPOCFE 선발 과제 클린 코드하기","description":"선발 과제를 클린 코드 규칙에 따라 리펙토링 한다","tags":["WPOCFE","원티드 프리온보드 프론트엔드 코스"],"publishedDate":"2022/07/04","lastModifiedAt":"2022/07/04"},"markdownBody":"\n# 1. 학습목표\n\n1. `Clean Code`를 작성하는 것이 중요한 이유에 대해 설명할 수 있다.\n2. 변수와 관련된 규칙 2가지를 설명할 수 있다.\n3. `조건문`이 아닌 기본 `매개변수`를 활용하여 함수를 깔끔하게 처리할 수 있다.\n4. 함수와 관련된 규칙 3가지를 설명할 수 있다.\n\n## 1.A. 대답\n\n참조 : [clean-code-javascript-ko](https://github.com/qkraudghgh/clean-code-javascript-ko)\n\n### 1.A.1. Clean Code를 작성의 이유\n\n코드의 가독성을 높여서 남이나 기억을 잃어버린 미래의 본인도 의미파악을 쉽게 하려고.\n\n### 1.A.2. 변수와 관련된 규칙\n\n- 의미있고 발음이 쉬운 이름\n- 동일한 유형에는 동일한 어휘를 사용\n- 검색 가능한 이름을 사용\n- 의도를 나타내는 이름 사용\n- 누구나 알아 볼 수 있는 이름\n- 문맥상 필요없는 것 쓰지 않기\n- 연산자, 조건문보다 기본 매개변수 할당\n\n### 1.A.2. `조건문`이 아닌 `기본 매개변수`를 활용하여 함수를 깔끔하게 처리\n\n```js\n// 조건문 사용\nfunction createAccount(name) {\n  return name || \"아무개\";\n}\n// 기본 매개변수 사용\nfunction createAccount(name = \"아무개\") {\n  return name;\n}\n\ncreateAccount(); // name이 undefined일 때 아무개 반환\n```\n\n### 1.A.3. 함수와 관련된 규칙\n\n- 인자는 2개 이하가 이상적\n- 하나의 행동만 한다\n- 함수명은 함수가 뭘 하는지 알 수 있어야 한다\n- 함수는 단일 행동을 추상화 해야 한다\n- 중복된 코드 작성 하지 않기\n- 매개변수로 플래그를 사용치 않기\n- 부수 효과 피하기\n- 전역 함수 사용치 않기\n- 조건문 캡슐화 하기\n- 부정조건문 사용치 않기\n- 조건문 작성 피하기\n- 죽은 코드 지우기\n- 함수 호출자와 피호출자는 가깝게 두기\n- 주석을 남기지 않기\n\n# 2. Q.\n\n```js\nBad:\nconst Car = {\n  carMake: 'BMW',\n  carModel: 'M3',\n  carColor: '파란색'\n};\n\nfunction paintCar(car) {\n  car.carColor = '빨간색';\n}\n\nGood:\nconst Car = {\n  make: 'BMW',\n  model: 'M3',\n  color: '파란색'\n};\n\nfunction paintCar(car) {\n  car.color = '빨간색';\n}\n\n\nconst user = {\n\tuserName:\"조인호\",\n\tuserAddress: \"서울\",\n\tuserAge:\"39\"\n}\n```\n\n- Car 객체 안에 carColor는 문맥상 반드시 필요할까요?\n\n- 매개변수란?\n\n- `||` 연산자는 무엇이고 언제 사용할까요?\n\n- 캡슐화란 무엇인가? (그룹 과제)\n"},"__N_SSG":true}