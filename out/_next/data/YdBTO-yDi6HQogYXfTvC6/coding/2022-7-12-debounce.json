{"pageProps":{"frontMatter":{"title":"디바운스란? (Debounce)","description":null,"tags":["자바스크립트 코드(+React)","성능 최적화"],"publishedDate":"2022/07/12","lastModifiedAt":"2022/07/12"},"markdownBody":"\n# 디바운스란? (debounce)\n\n`사과`를 검색한다면 ㅅ, ㅏ, ㄱ, ㅗ, ㅏ 이렇게 자모음 한자씩 입력할때마다 api를 불러올 필요는 없다. 그래서 문장을 전부 완성하고 나서 작업을 수행할 수 있게 하는 기능이다.\n\n- 연속된 이벤트가 발생할 경우 마지막 이벤트 한 번만 실행한다.\n- javascript `setTimeout`으로 단순하게 구현할 수 있다.\n- [lodash](https://lodash.com/)에 디바운스 기능이 있다. `setTimeout`이 아니다.\n\n```js\n// debounce.js\nlet timer = undefined;\nlet apiCallNumber = 0;\n\nfunction debouunce(callback, { timeout = 500 }) {\n  const timerHandler = () => {\n    callback();\n    apiCallNumber = apiCallNumber + 1;\n    console.log(\"Api call number :\", apiCallNumber);\n  };\n\n  if (timer) clearTimeout(timer);\n  timer = setTimeout(timerHandler, timeout);\n}\n\nexport default debouunce;\n\n// SearchForm.jsx\n// ...\nconst [words, setWords] = useState([]);\nconst searchInputRef = useRef(null);\n\nconst getAutoComplete = (event) => {\n  event.preventDefault();\n\n  const term = searchInputRef.current?.value;\n  function invokeAutoComplete() {\n    if (!term) return setWords([]);\n\n    // checkFuzzyStringMatch()이 비용이 큰 작업이라면 수행을 최소화한다\n    let titles = checkFuzzyStringMatch(term);\n    if (isZeroLengthArray(titles)) titles = [\"검색어 없음\"];\n    setWords(titles);\n  }\n\n  debouunce(invokeAutoComplete, { timeout: 200 });\n};\n\nreturn (\n  <form>\n    <input type={\"search\"} ref={searchInputRef} onChange={getAutoComplete} />\n  </form>\n);\n```\n"},"__N_SSG":true}